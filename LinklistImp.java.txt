//Linkedlist Implementation 



class LinkedListTypes {

    // Singly Linked List
    static class SinglyLinkedList {
        static class Node {
            int data;
            Node next;

            Node(int data) {
                this.data = data;
                this.next = null;
            }
        }

        private Node head;

        // Insert a new node at the end
        public void insert(int data) {
            Node newNode = new Node(data);
            if (head == null) {
                head = newNode;
            } else {
                Node temp = head;
                while (temp.next != null) {
                    temp = temp.next;
                }
                temp.next = newNode;
            }
            System.out.println("Singly Linked List - Inserted: " + data);
        }

        // Display the list
        public void display() {
            Node temp = head;
            if (head == null) {
                System.out.println("Singly Linked List is empty");
                return;
            }
            while (temp != null) {
                System.out.print(temp.data + " -> ");
                temp = temp.next;
            }
            System.out.println("null");
        }
    }

    // Doubly Linked List
    static class DoublyLinkedList {
        static class Node {
            int data;
            Node prev;
            Node next;

            Node(int data) {
                this.data = data;
                this.prev = null;
                this.next = null;
            }
        }

        private Node head;

        // Insert a new node at the end
        public void insert(int data) {
            Node newNode = new Node(data);
            if (head == null) {
                head = newNode;
            } else {
                Node temp = head;
                while (temp.next != null) {
                    temp = temp.next;
                }
                temp.next = newNode;
                newNode.prev = temp;
            }
            System.out.println("Doubly Linked List - Inserted: " + data);
        }

        // Display the list
        public void displayForward() {
            Node temp = head;
            if (head == null) {
                System.out.println("Doubly Linked List is empty");
                return;
            }
            while (temp != null) {
                System.out.print(temp.data + " <-> ");
                temp = temp.next;
            }
            System.out.println("null");
        }
    }

    // Circular Linked List
    static class CircularLinkedList {
        static class Node {
            int data;
            Node next;

            Node(int data) {
                this.data = data;
                this.next = null;
            }
        }

        private Node head;

        // Insert a new node at the end
        public void insert(int data) {
            Node newNode = new Node(data);
            if (head == null) {
                head = newNode;
                newNode.next = head;  // Point the new node to itself
            } else {
                Node temp = head;
                while (temp.next != head) {
                    temp = temp.next;
                }
                temp.next = newNode;
                newNode.next = head;  // Link the last node back to the head
            }
            System.out.println("Circular Linked List - Inserted: " + data);
        }

        // Display the list
        public void display() {
            if (head == null) {
                System.out.println("Circular Linked List is empty");
                return;
            }
            Node temp = head;
            do {
                System.out.print(temp.data + " -> ");
                temp = temp.next;
            } while (temp != head);
            System.out.println("(back to head)");
        }
    }

    // Circular Doubly Linked List
    static class CircularDoublyLinkedList {
        static class Node {
            int data;
            Node next;
            Node prev;

            Node(int data) {
                this.data = data;
                this.next = null;
                this.prev = null;
            }
        }

        private Node head;

        // Insert a new node at the end
        public void insert(int data) {
            Node newNode = new Node(data);
            if (head == null) {
                head = newNode;
                newNode.next = head;
                newNode.prev = head;
            } else {
                Node tail = head.prev;  // Get the last node
                tail.next = newNode;
                newNode.prev = tail;
                newNode.next = head;
                head.prev = newNode;
            }
            System.out.println("Circular Doubly Linked List - Inserted: " + data);
        }

        // Display the list forward
        public void displayForward() {
            if (head == null) {
                System.out.println("Circular Doubly Linked List is empty");
                return;
            }
            Node temp = head;
            do {
                System.out.print(temp.data + " <-> ");
                temp = temp.next;
            } while (temp != head);
            System.out.println("(back to head)");
        }
    }

    public static void main(String[] args) {
        // Singly Linked List
        SinglyLinkedList sList = new SinglyLinkedList();
        sList.insert(5);
        sList.insert(10);
        sList.insert(15);
        sList.insert(20);
        sList.insert(25);
        sList.display();

        // Doubly Linked List
        DoublyLinkedList dList = new DoublyLinkedList();
        dList.insert(30);
        dList.insert(35);
        dList.insert(40);
        dList.insert(45);
        dList.insert(50);
        dList.displayForward();

        // Circular Linked List
        CircularLinkedList cList = new CircularLinkedList();
        cList.insert(55);
        cList.insert(60);
        cList.insert(65);
        cList.insert(70);
        cList.insert(75);
        cList.display();

        // Circular Doubly Linked List
        CircularDoublyLinkedList cdList = new CircularDoublyLinkedList();
        cdList.insert(80);
        cdList.insert(85);
        cdList.insert(90);
        cdList.insert(95);
        cdList.insert(100);
        cdList.displayForward();
    }
}


