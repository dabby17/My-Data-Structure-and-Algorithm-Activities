//Queue with linkedlist



class QueueLinkedList {

    // Node class to represent each element in the queue
    private class Node {
        int data;
        Node next;
    }

    private Node front, rear;

    // Constructor
    QueueLinkedList() {
        front = rear = null; // Initially, the queue is empty
    }

    // Enqueue operation to add element to the rear of the queue
    public void enqueue(int data) {
        Node newNode = new Node();
        newNode.data = data;
        newNode.next = null; // New node will be added at the rear, so its next is null

        if (rear == null) { // If the queue is empty, front and rear are the same
            front = rear = newNode;
            System.out.println("Enqueued " + data + " to the queue.");
            return;
        }

        rear.next = newNode; // Link the old rear to the new node
        rear = newNode; // Update the rear
        System.out.println("Enqueued " + data + " to the queue.");
    }

    // Dequeue operation to remove the front element
    public int dequeue() {
        if (front == null) { // If the queue is empty
            System.out.println("Queue is empty.");
            return -1;
        }

        int value = front.data; // Get the front data
        front = front.next; // Move front to the next node

        // If the queue is now empty, set rear to null as well
        if (front == null) {
            rear = null;
        }

        System.out.println("Dequeued " + value + " from the queue.");
        return value;
    }

    // Peek operation to return the front element without removing it
    public int peek() {
        if (front == null) {
            System.out.println("Queue is empty.");
            return -1;
        }
        return front.data;
    }

    // Check if the queue is empty
    public boolean isEmpty() {
        return front == null;
    }

    // Display the elements of the queue
    public void display() {
        if (front == null) {
            System.out.println("Queue is empty.");
            return;
        }

        Node temp = front;
        System.out.println("Queue elements:");
        while (temp != null) {
            System.out.print(temp.data + " ");
            temp = temp.next;
        }
        System.out.println();
    }

    public static void main(String[] args) {
        QueueLinkedList queue = new QueueLinkedList();

        // Queue operations
        queue.enqueue(6);
        queue.enqueue(12);
        queue.enqueue(18);
        queue.enqueue(24);
        queue.enqueue(30);
        

        queue.display();

        System.out.println("Peek element: " + queue.peek());

        queue.dequeue();
        queue.display();

        System.out.println("Queue is empty: " + queue.isEmpty());
    }
}